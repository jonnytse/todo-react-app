{"version":3,"sources":["components/Todos/index.js","components/Todos/Todos.js","components/AddTodo/index.js","components/AddTodo/AddTodo.js","container/App/App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","handleChange","event","setState","target","value","handleSubmit","preventDefault","props","addTodo","console","log","onSubmit","this","type","onChange","placeholder","Component","App","filterTodos","filter","Math","random","addedTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAEeA,ECiCD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAEbC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAS,WAAOR,EAAWI,EAAKG,MAAOH,EAAKK,aAK9D,uBAAGJ,UAAU,UAAb,6CAEJ,OACI,yBAAKA,UAAU,oBACVJ,IChDES,E,4MCCXC,MAAQ,CACJF,QAAS,I,EAEbG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,QAASI,EAAME,OAAOC,S,EAG9BC,aAAe,SAACJ,GACZA,EAAMK,iBACN,EAAKC,MAAMC,QAAQ,EAAKT,OACxBU,QAAQC,IAAI,EAAKX,OACjBU,QAAQC,IAAI,EAAKX,MAAMF,SACvB,EAAKK,SAAU,CACXL,QAAS,M,uDAIb,OACI,6BACI,0BAAMc,SAAUC,KAAKP,cACjB,mDACA,2BAAOQ,KAAK,OAAOC,SAAUF,KAAKZ,aAAce,YAAa,YAAaX,MAAOQ,KAAKb,MAAMF,gB,GAvB1FmB,aCqCPC,E,4MAlCblB,MAAQ,CACNZ,MAAO,CACL,CAACQ,GAAI,EAAGE,QAAS,mBACjB,CAACF,GAAI,EAAGE,QAAS,gBACjB,CAACF,GAAI,EAAGE,QAAS,kB,EAGrBT,WAAa,SAACO,GACZ,IAAMuB,EAAc,EAAKnB,MAAMZ,MAAMgC,QAAO,SAAA3B,GAC1C,OAAOA,EAAKG,KAAOA,KAErB,EAAKO,SAAS,CACZf,MAAO+B,K,EAGXV,QAAU,SAAChB,GACTA,EAAKG,GAAKyB,KAAKC,SACf,IAAIC,EAAU,sBAAO,EAAKvB,MAAMZ,OAAlB,CAAyBK,IACvC,EAAKU,SAAS,CACZf,MAAOmC,K,uDAIT,OACE,yBAAK7B,UAAU,sBACb,wBAAIA,UAAU,oBAAd,0BACA,wBAAIA,UAAU,mBAAd,+CACA,kBAAC,EAAD,CAAON,MAAOyB,KAAKb,MAAMZ,MAAOC,WAAYwB,KAAKxB,aACjD,kBAAC,EAAD,CAASoB,QAASI,KAAKJ,e,GA7BbQ,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.094458d5.chunk.js","sourcesContent":["import Todos from './Todos';\n\nexport default Todos;","// // *** VERSION 1 - stateless component showing how props is passed down from the App.js\n// //this is a functional component (stateless component) that receives props from App.js\n// //see Net Ninja react tutorial. chapter 15 stateless components for more information\n// //see lines 33-58 for the shortened version, and compare with lines 6-7\n// import React from 'react';\n\n// const Todos = (props) => {       //in this line, how do I add more props, like deleteTodo() from App.js component? \n//     const {todos} = props;               \n//     const todoList = todos.length ? (\n//         todos.map(todo => {\n//             return (\n//                 <div className=\"collection-item\" key={todo.id}>\n//                     <span>{todo.content}</span>\n//                 </div>\n//             )\n//         })\n//     ) : (\n//         <p className=\"center\">The todo list is empty - congratulations!</p>\n//     ) \n//     return (\n//         <div className=\"todos collection\">  \n//             {todoList}\n//         </div>\n        \n//     )\n// }\n\n// export default Todos;   \n\n\n// *** VERSION 2 - stateless component with 2x props destructured directly.\n//this is a functional (stateless component) that has 'todos props' and 'deleteTodo function' destructured directly\n//see Net Ninja react tutorial, chapter 15 stateless components for more info\nimport React from 'react';\n\nconst Todos = ({todos, deleteTodo}) => {     \n\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return (\n                <div className=\"collection-item\" key={todo.id}>\n                    <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"center\">The todo list is empty - congratulations!</p>\n    ) \n    return (\n        <div className=\"todos collection\">  \n            {todoList}\n        </div>\n    )\n}\n\nexport default Todos;   \n\n\n// // *** VERSION 3 - class (container) component\n// //this is the class versiobn of the Component. Class components require the render method and typically\n// //houses states within, hence this can be alternatively written as a stateless component, as above\n// //see Net Ninja react tutorial, chapter 15 stateless components for more info\n// import React, { Component } from 'react';\n\n// class Todos extends Component {\n//     render() {\n//         const {todos} = this.props;   // //in this line, how do I add more props, like deleteTodo() from App.js component? \n//         const todoList = todos.length ? (\n//             todos.map(todo => {\n//             return (\n//                 <div className=\"collection-item\" key={todo.id}>\n//                     <span>{todo.content}</span>\n//                 </div>\n//             )\n//         })\n//         ) : (\n//             <p classNane=\"center\">The todo list is empty - congrats!</p>\n//         )    \n//         return (\n//             <div className=\"todos collection\">\n//                 {todoList}\n//             </div>\n//         )\n//     }\n// }\n\n// export default Todos","import AddTodo from './AddTodo';\n\nexport default AddTodo;","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n    state = {\n        content: ''\n    }\n    handleChange = (event) => {\n        this.setState({ \n            content: event.target.value \n        })\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.addTodo(this.state)\n        console.log(this.state)\n        console.log(this.state.content)\n        this.setState ({\n            content: ''\n        })\n    }\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>Add a new todo: </label>\n                    <input type=\"type\" onChange={this.handleChange} placeholder={'Type here'} value={this.state.content} />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from '../../components/Todos';\nimport AddTodo from '../../components/AddTodo';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {id: 1, content: 'Practice coding'},\n      {id: 2, content: 'Mow the lawn'},\n      {id: 3, content: 'Walk the dog'}\n    ]\n  }\n  deleteTodo = (id) => {\n    const filterTodos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({\n      todos: filterTodos\n    })\n  }\n  addTodo = (todo) => {\n    todo.id = Math.random()\n    let addedTodos = [...this.state.todos, todo]\n    this.setState({\n      todos: addedTodos\n    })\n  }\n  render() {\n    return (\n      <div className=\"todo-app container\">\n        <h1 className=\"center blue-text\">Jonathan's Todo's List</h1>\n        <h5 className=\"center red-text\">Click on a todo to remove it from the list!</h5>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <AddTodo addTodo={this.addTodo}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}